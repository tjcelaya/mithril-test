(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
}

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

var _helpers = require('./helpers');

var _counter = require('./counter');

var _counter2 = _interopRequireDefault(_counter);

var _cart = require('./cart');

var _cart2 = _interopRequireDefault(_cart);

var _productListingJs = require('./product-listing.js');

var _productListingJs2 = _interopRequireDefault(_productListingJs);

var Store = {
    model: {
        products: _mithril2['default'].request({ url: 'http://localhost:3000/products', method: 'GET' }),
        cart: _mithril2['default'].prop([]),
        addToCart: function addToCart(item) {
            // debugger;
            return Store.model.cart(Store.model.cart().concat(item));
        }
    },
    vm: {
        confirming: _mithril2['default'].prop(false)
    },
    controller: function controller(args) {},
    view: function view(ctrl, args) {
        var c = (0, _helpers.contain)((0, _helpers.col)(8, _mithril2['default'].component(_productListingJs2['default'], {
            products: Store.model.products,
            addToCart: Store.model.addToCart
        })), (0, _helpers.col)(4, _mithril2['default'].component(_cart2['default'], { products: Store.model.cart })));
        return c;
    }
};

_mithril2['default'].mount(document.getElementById('app'), Store);

},{"./cart":2,"./counter":3,"./helpers":4,"./product-listing.js":5,"mithril":"mithril"}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj['default'] = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
}

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

var _helpers = require('./helpers');

var h = _interopRequireWildcard(_helpers);

'use strict';

var Cart = {
    controller: function controller(args) {
        h.l('cart ctrl:', args);
    },
    view: function view(ctrl, args) {
        var contents = args.products();

        if (contents.length === 0) return (0, _mithril2['default'])('p', 'I am a cart, but I\'m empty!');

        return (0, _mithril2['default'])('ul.list-group', contents.map(function (c) {
            return (0, _mithril2['default'])('li.list-group-item', c.title);
        }));
        // return args.productsInCart.map(p => m('p', p));
    }
};

exports['default'] = Cart;
module.exports = exports['default'];

},{"./helpers":4,"mithril":"mithril"}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
}

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

var _helpers = require('./helpers');

'use strict';

var Counter = {
    controller: function controller(args) {
        var _this = this;

        (0, _helpers.l)('Counter ctrl instantiated');
        this.count = _mithril2['default'].prop(0);
        this.incInternal = function () {
            return _this.count(_this.count() + 1);
        };
        return this;
    },
    view: function view(ctrl, args) {
        return (0, _helpers.layoutRow)([(0, _mithril2['default'])('button.btn.btn-success', {
            onclick: ctrl.incInternal
        }, ctrl.count())], ['internal:', ctrl.count(), (0, _mithril2['default'])('br'), 'external:', args.externalCount()]);
    }
};

exports['default'] = Counter;
module.exports = exports['default'];

},{"./helpers":4,"mithril":"mithril"}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
}

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

'use strict';

window.m = _mithril2['default'];

var l = console.log.bind(console);
exports.l = l;
var e = console.error.bind(console);

exports.e = e;
var contain = function contain() {
    for (var _len = arguments.length, nodes = Array(_len), _key = 0; _key < _len; _key++) {
        nodes[_key] = arguments[_key];
    }

    return (0, _mithril2['default'])('.container', nodes);
};

exports.contain = contain;
var row = function row() {
    for (var _len2 = arguments.length, any = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        any[_key2] = arguments[_key2];
    }

    return (0, _mithril2['default'])('.row', any);
};

exports.row = row;
var col = function col(width) {
    for (var _len3 = arguments.length, nodes = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        nodes[_key3 - 1] = arguments[_key3];
    }

    // debugger;
    return (0, _mithril2['default'])('.col-xs-' + width, nodes);
};

exports.col = col;
var layoutCol = function layoutCol(nodesInRow) {
    for (var _len4 = arguments.length, nodes = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        nodes[_key4 - 1] = arguments[_key4];
    }

    // debugger;
    return row(nodes.map(function (n) {
        return col(Math.floor(12 / nodesInRow), n);
    }));
};

exports.layoutCol = layoutCol;
var layoutSpread = function layoutSpread() {
    for (var _len5 = arguments.length, nodes = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        nodes[_key5] = arguments[_key5];
    }

    // debugger;
    return layoutCol.apply(undefined, [nodes.length].concat(nodes));
};

exports.layoutSpread = layoutSpread;
var MISSING_IMAGE = '/img/placeholder_small.png';
exports.MISSING_IMAGE = MISSING_IMAGE;

},{"mithril":"mithril"}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj['default'] = obj;return newObj;
    }
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { 'default': obj };
}

var _mithril = require('mithril');

var _mithril2 = _interopRequireDefault(_mithril);

var _helpers = require('./helpers');

var h = _interopRequireWildcard(_helpers);

'use strict';

var ProductListing = {
    controller: function controller(args) {
        h.l('pl.ctrl got args:', args);
    },
    view: function view(ctrl, args) {
        return (0, _mithril2['default'])('.product-listing',
        // layoutCol(3, ...
        args.products().map(function (p) {
            return (0, _mithril2['default'])('.product', (0, _mithril2['default'])('h1', p.title), (0, _mithril2['default'])('img.pull-left', { src: p.image || h.MISSING_IMAGE, width: '50px', height: '50px' }), (0, _mithril2['default'])('p', p.description), (0, _mithril2['default'])('button.btn.btn-success.add-to-cart', {
                onclick: args.addToCart.bind(null, p)
            }, 'Add to Cart'));
        }));
    }
};

exports['default'] = ProductListing;
module.exports = exports['default'];

},{"./helpers":4,"mithril":"mithril"}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS90ai9Ecm9wYm94L2Rldi9taXRocmlsLXRlc3Qvc3JjL2FwcC5qcyIsIi9ob21lL3RqL0Ryb3Bib3gvZGV2L21pdGhyaWwtdGVzdC9zcmMvY2FydC5qcyIsIi9ob21lL3RqL0Ryb3Bib3gvZGV2L21pdGhyaWwtdGVzdC9zcmMvY291bnRlci5qcyIsIi9ob21lL3RqL0Ryb3Bib3gvZGV2L21pdGhyaWwtdGVzdC9zcmMvaGVscGVycy5qcyIsIi9ob21lL3RqL0Ryb3Bib3gvZGV2L21pdGhyaWwtdGVzdC9zcmMvcHJvZHVjdC1saXN0aW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsWUFBWSxDQUFDOztBQUViLFNBQVMsc0JBQXNCLENBQUMsR0FBRyxFQUFFO0FBQUUsV0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUM7Q0FBRTs7QUFFakcsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUhSLFNBQVMsQ0FBQSxDQUFBOztBQUt2QixJQUFJLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFakQsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQU5PLFdBQVcsQ0FBQSxDQUFBOztBQVF4QyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBUEYsV0FBVyxDQUFBLENBQUE7O0FBUy9CLElBQUksU0FBUyxHQUFHLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDOztBQUVqRCxJQUFJLEtBQUssR0FBRyxPQUFPLENBVkYsUUFBUSxDQUFBLENBQUE7O0FBWXpCLElBQUksTUFBTSxHQUFHLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUUzQyxJQUFJLGlCQUFpQixHQUFHLE9BQU8sQ0FiSixzQkFBc0IsQ0FBQSxDQUFBOztBQWVqRCxJ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QUFBLENBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFDckIsQ0FBQSxDQUFBLEVBQUEsU0FBQSxDQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUUsb0NBQW9DLEVBQUU7QUFDcEMsdUJBQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO2FBQ3hDLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztTQUM5QixDQUFDLENBQUMsQ0FBQztLQUNQO0NBQ0osQ0FBQzs7QUFjRixPQUFPLENBQUMsU0FBUyxDQUFDLEdBWkgsY0FBYyxDQUFBO0FBYTdCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIid1c2Ugc3RyaWN0JztcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHsgY29sLCBjb250YWluIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCBDb3VudGVyIGZyb20gJy4vY291bnRlcic7XG5pbXBvcnQgQ2FydCBmcm9tICcuL2NhcnQnO1xuaW1wb3J0IFByb2R1Y3RMaXN0aW5nIGZyb20gJy4vcHJvZHVjdC1saXN0aW5nLmpzJztcblxubGV0IFN0b3JlID0ge1xuICAgIG1vZGVsOiB7XG4gICAgICAgIHByb2R1Y3RzOiBtLnJlcXVlc3QoeyB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvcHJvZHVjdHMnLCBtZXRob2Q6ICdHRVQnfSksXG4gICAgICAgIGNhcnQ6IG0ucHJvcChbXSksXG4gICAgICAgIGFkZFRvQ2FydDogaXRlbSA9PiB7XG4gICAgICAgICAgICAvLyBkZWJ1Z2dlcjtcbiAgICAgICAgICAgIHJldHVybiBTdG9yZS5tb2RlbC5jYXJ0KFN0b3JlLm1vZGVsLmNhcnQoKS5jb25jYXQoaXRlbSkpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICB2bToge1xuICAgICAgICBjb25maXJtaW5nOiBtLnByb3AoZmFsc2UpXG4gICAgfSxcbiAgICBjb250cm9sbGVyOiBmdW5jdGlvbiAoYXJncykge1xuXG4gICAgfSxcbiAgICB2aWV3OiAoY3RybCwgYXJncykgPT4ge1xuICAgICAgICBsZXQgYyA9IGNvbnRhaW4oXG4gICAgICAgICAgICBjb2woOCwgbS5jb21wb25lbnQoUHJvZHVjdExpc3RpbmcsIHtcbiAgICAgICAgICAgICAgICBwcm9kdWN0czogU3RvcmUubW9kZWwucHJvZHVjdHMsXG4gICAgICAgICAgICAgICAgYWRkVG9DYXJ0OiBTdG9yZS5tb2RlbC5hZGRUb0NhcnRcbiAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIGNvbCg0LCBtLmNvbXBvbmVudChDYXJ0LCB7IHByb2R1Y3RzOiBTdG9yZS5tb2RlbC5jYXJ0IH0pKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gYztcbiAgICB9XG59O1xuXG5cblxuXG5cbm0ubW91bnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpLCBTdG9yZSk7XG4iLCIndXNlIHN0cmljdCc7XG5pbXBvcnQgbSBmcm9tICdtaXRocmlsJztcbmltcG9ydCAqIGFzIGggZnJvbSAnLi9oZWxwZXJzJztcblxubGV0IENhcnQgPSB7XG4gICAgY29udHJvbGxlcjogZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgICAgaC5sKCdjYXJ0IGN0cmw6JywgYXJncyk7XG4gICAgfSxcbiAgICB2aWV3OiBmdW5jdGlvbiAoY3RybCwgYXJncykge1xuICAgICAgICBsZXQgY29udGVudHMgPSBhcmdzLnByb2R1Y3RzKCk7XG5cbiAgICAgICAgaWYgKGNvbnRlbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiBtKCdwJywgJ0kgYW0gYSBjYXJ0LCBidXQgSVxcJ20gZW1wdHkhJyk7XG5cbiAgICAgICAgcmV0dXJuIG0oJ3VsLmxpc3QtZ3JvdXAnLCBjb250ZW50cy5tYXAoYyA9PlxuICAgICAgICAgICAgbSgnbGkubGlzdC1ncm91cC1pdGVtJywgYy50aXRsZSkpKTtcbiAgICAgICAgLy8gcmV0dXJuIGFyZ3MucHJvZHVjdHNJbkNhcnQubWFwKHAgPT4gbSgncCcsIHApKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDYXJ0OyIsIid1c2Ugc3RyaWN0JztcbmltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuaW1wb3J0IHsgbCwgZSwgbGF5b3V0Um93IH0gZnJvbSAnLi9oZWxwZXJzJztcblxubGV0IENvdW50ZXIgPSB7XG4gICAgY29udHJvbGxlcjogZnVuY3Rpb24oYXJncykge1xuICAgICAgICBsKCdDb3VudGVyIGN0cmwgaW5zdGFudGlhdGVkJyk7XG4gICAgICAgIHRoaXMuY291bnQgPSBtLnByb3AoMCk7XG4gICAgICAgIHRoaXMuaW5jSW50ZXJuYWwgPSAoKSA9PiB0aGlzLmNvdW50KHRoaXMuY291bnQoKSArIDEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHZpZXc6IChjdHJsLCBhcmdzKSA9PlxuICAgICAgICBsYXlvdXRSb3coXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgbSgnYnV0dG9uLmJ0bi5idG4tc3VjY2VzcycsIHtcbiAgICAgICAgICAgICAgICAgICAgb25jbGljazogY3RybC5pbmNJbnRlcm5hbFxuICAgICAgICAgICAgICAgIH0sIGN0cmwuY291bnQoKSlcbiAgICAgICAgICAgIF0sW1xuICAgICAgICAgICAgICAgICdpbnRlcm5hbDonLCBjdHJsLmNvdW50KCksXG4gICAgICAgICAgICAgICAgbSgnYnInKSxcbiAgICAgICAgICAgICAgICAnZXh0ZXJuYWw6JywgYXJncy5leHRlcm5hbENvdW50KCksXG4gICAgICAgICAgICBdXG4gICAgICAgIClcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvdW50ZXI7IiwiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG53aW5kb3cubSA9IG07XG5cbmV4cG9ydCBsZXQgbCA9IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG5leHBvcnQgbGV0IGUgPSBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSk7XG5cbmV4cG9ydCBsZXQgY29udGFpbiA9ICguLi5ub2RlcykgPT4gbSgnLmNvbnRhaW5lcicsIG5vZGVzKTtcblxuZXhwb3J0IGxldCByb3cgPSAoLi4uYW55KSA9PiBtKCcucm93JywgYW55KTtcblxuZXhwb3J0IGxldCBjb2wgPSAod2lkdGgsIC4uLm5vZGVzKSA9PiB7XG4gICAgLy8gZGVidWdnZXI7XG4gICAgcmV0dXJuIG0oYC5jb2wteHMtJHt3aWR0aH1gLCBub2Rlcyk7XG59O1xuXG5leHBvcnQgbGV0IGxheW91dENvbCA9IChub2Rlc0luUm93LCAuLi5ub2RlcykgPT4ge1xuICAgIC8vIGRlYnVnZ2VyO1xuICAgIHJldHVybiByb3cobm9kZXMubWFwKCBuID0+IGNvbChNYXRoLmZsb29yKDEyIC8gbm9kZXNJblJvdyksIG4pKSk7XG59O1xuXG5leHBvcnQgbGV0IGxheW91dFNwcmVhZCA9ICguLi5ub2RlcykgPT4ge1xuICAgIC8vIGRlYnVnZ2VyO1xuICAgIHJldHVybiBsYXlvdXRDb2wobm9kZXMubGVuZ3RoLCAuLi5ub2Rlcyk7XG59O1xuXG5leHBvcnQgY29uc3QgTUlTU0lOR19JTUFHRSA9ICcvaW1nL3BsYWNlaG9sZGVyX3NtYWxsLnBuZyc7IiwiJ3VzZSBzdHJpY3QnO1xuaW1wb3J0IG0gZnJvbSAnbWl0aHJpbCc7XG5pbXBvcnQgKiBhcyBoIGZyb20gJy4vaGVscGVycyc7XG5cbmxldCBQcm9kdWN0TGlzdGluZyA9IHtcbiAgICBjb250cm9sbGVyOiBmdW5jdGlvbiAoYXJncykge1xuICAgICAgICBoLmwoJ3BsLmN0cmwgZ290IGFyZ3M6JywgYXJncyk7XG4gICAgfSxcbiAgICB2aWV3OiAoY3RybCwgYXJncykgPT4geyBcbiAgICAgICAgcmV0dXJuIG0oJy5wcm9kdWN0LWxpc3RpbmcnLFxuICAgICAgICAgICAgLy8gbGF5b3V0Q29sKDMsIC4uLlxuICAgICAgICAgICAgYXJncy5wcm9kdWN0cygpLm1hcChwID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbSgnLnByb2R1Y3QnLFxuICAgICAgICAgICAgICAgICAgICBtKCdoMScsIHAudGl0bGUpLFxuICAgICAgICAgICAgICAgICAgICBtKCdpbWcucHVsbC1sZWZ0JywgeyBzcmM6IHAuaW1hZ2UgfHwgaC5NSVNTSU5HX0lNQUdFLCB3aWR0aDogXCI1MHB4XCIsIGhlaWdodDogXCI1MHB4XCIgfSksXG4gICAgICAgICAgICAgICAgICAgIG0oJ3AnLCBwLmRlc2NyaXB0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgbSgnYnV0dG9uLmJ0bi5idG4tc3VjY2Vzcy5hZGQtdG8tY2FydCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6IGFyZ3MuYWRkVG9DYXJ0LmJpbmQobnVsbCwgcClcbiAgICAgICAgICAgICAgICAgICAgfSwgJ0FkZCB0byBDYXJ0JykpO1xuICAgICAgICB9KSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdExpc3Rpbmc7Il19
